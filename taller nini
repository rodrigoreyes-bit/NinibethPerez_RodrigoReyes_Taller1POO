/* Nombre: Ninibeth Pérez Cortés, RUT: 21.787.686-9, Carrera: ICCI | Nombre: Rodrigo Reyes Alfaro, RUT: 22.123.808-7, Carrera: ICCI
 * Nombre: Ninibeth Pérez Cortés, RUT: 21.787.686-9, Carrera: ICCI | Nombre: Rodrigo Reyes Alfaro, RUT: 22.123.808-7, Carrera: ICCI
 * Nombre: Ninibeth Pérez Cortés, RUT: 21.787.686-9, Carrera: ICCI | Nombre: Rodrigo Reyes Alfaro, RUT: 22.123.808-7, Carrera: ICCI
 * Nombre: Ninibeth Pérez Cortés, RUT: 21.787.686-9, Carrera: ICCI | Nombre: Rodrigo Reyes Alfaro, RUT: 22.123.808-7, Carrera: ICCI
 * Nombre: Ninibeth Pérez Cortés, RUT: 21.787.686-9, Carrera: ICCI | Nombre: Rodrigo Reyes Alfaro, RUT: 22.123.808-7, Carrera: ICCI
 */

import java.io.File;
import java.io.IOException;
import java.util.Scanner;

public class Taller1 {
	
	public static int cantExp() throws IOException {
		//esta funcion entrega la cantidad de experimentos que hay en el archivo de experimentos.txt
		int cantidad = 0;
		
		File arch = new File("experimentos.txt");
		Scanner lector = new Scanner(arch);
		
		while (lector.hasNextLine()) {
			cantidad++;
			lector.nextLine();
		}
		lector.close();
		return cantidad;
	}
	
	public static void agregarExp(String [] listaExperimentos) throws IOException {
		//esta funcion agrega los experimentos de arch experimentos.txt a la lista de experimentos
		File arch = new File("experimentos.txt");
		Scanner lector = new Scanner(arch);
		
		int indice = 0;
		while (lector.hasNextLine()) {
			String linea = lector.nextLine();
			String [] partes = linea.split(";");
			String exp = partes[0];
			listaExperimentos[indice] = exp;
			indice++;
		}
		lector.close();
	}
	
	public static int[] matrizDeConfusion (String exp) throws IOException {
		//esta funcion crea la matriz de confusion (será una lista para hacerlo mas sencillo :3)
		//la lista que creará será -> matrizConfusion = {TP,FP,TN,FN}
		int [] matriz = new int[4];
		File arch = new File("predicciones.txt");
		Scanner lector = new Scanner(arch);
		
		while (lector.hasNextLine()) {
			String linea = lector.nextLine();
			String [] partes = linea.split(";");
			String idExperimento = partes[0];
			
			if (idExperimento.equals(exp)) {
				int valorReal = Integer.valueOf(partes[1]);
				int valorPredicho = Integer.valueOf(partes[2]);
				
				if (valorReal == 1 && valorPredicho == 1) { 
					//TP
					matriz[0] += 1;
				} else if (valorReal == 0 && valorPredicho == 1) {
					//FP
					matriz[1] += 1;
				} else if (valorReal == 0 && valorPredicho == 0) {
					//TN
					matriz[2] += 1;
				} else if (valorReal == 1 && valorPredicho == 0) {
					//FN
					matriz[3] += 1;
				}
			}
		}
		lector.close();
		return matriz;
	}
	
	public static double accuracy(int []matriz) {
		//Esta función calcula el accuracy
		double tp = matriz[0];
		double fp = matriz[1];
		double tn = matriz[2];
		double fn = matriz[3];
		
		double accuracy = (tp + tn) / (tp + fp + tn + fn);
		return accuracy;
	}
	
	public static double precision(int [] matriz) {
		//Esta función calcula la precision
		double tp = matriz[0];
		double fp = matriz[1];
		
		double precision = tp / (tp + fp);
		return precision;
	}
	
	public static double recall(int []matriz) {
		//Esta función calcula el recall
		double tp = matriz[0];
		double fn = matriz[3];
		
		double recall = tp / (tp + fn) ;
		return recall;
	}
	
	public static double f1Score(double precision, double recall) {
		//Esta función calcula el f1 score
		double f1Score = 2 * (precision * recall) / (precision + recall);
		return f1Score;
	}
	
	public static void verMatrizCompleta () throws IOException {
		//Imprime la matriz completa de todas las metricas de los experimentos
		File experimentos = new File("experimentos.txt");
		Scanner lector = new Scanner(experimentos);
		System.out.println("ID | Descripción | TP FP TN FN | Accuracy | Precision | Recall | F1");
		System.out.println("--------------------------------------------------------------------");
		
		while (lector.hasNextLine()) {
			String linea = lector.nextLine();
			String [] partes = linea.split(";");
			String idExp = partes[0];
			String descripcion = partes[1];
			
			int [] matriz = matrizDeConfusion(idExp);
			double accuracy = accuracy(matriz);
			double precision = precision(matriz);
			double recall = recall(matriz);
			double f1Score = f1Score(precision, recall);
			
			System.out.println(idExp + " | " + descripcion + " | " + matriz[0] + "  " + matriz[1] + "  " + matriz[2] + "  " + matriz[3] + " | " + accuracy + " | " + precision + " | " + recall + " | " + f1Score);
		}
		lector.close();
	}
	
	public static void mejorF1Score (String [] listaExperimentos) throws IOException {
		//esta lista imprime el mejor f1-Score
		double mejorScore = 0;
		String mejorExp = "";
		int [] matriz;
		for (String experimento : listaExperimentos) {
			matriz = matrizDeConfusion(experimento);
			double precision = precision(matriz);
			double recall = recall(matriz);
			double f1Score = f1Score(precision, recall);
			if (f1Score > mejorScore) {
				mejorScore = f1Score;
				mejorExp = experimento;
			}
		}
		System.out.println("El mejor F1-Score es el: " + mejorExp + " con " + mejorScore + "\n");
	}
	
	public static void promedioGlobalMetricas (String [] listaExperimentos) throws IOException {
		double sumaAccuracy = 0;
		double sumaPrecision = 0;
		double sumaRecall = 0;
		double sumaF1 = 0;
		
		for (String experimento : listaExperimentos) {
			int [] matriz = matrizDeConfusion(experimento);
			double accuracy = accuracy(matriz);
			double precision = precision(matriz);
			double recall = recall(matriz);
			double f1Score = f1Score(precision, recall);
			sumaAccuracy += accuracy;
			sumaPrecision += precision;
			sumaRecall += recall;
			sumaF1 += f1Score;
		}
		System.out.println("Promedio Accuracy: " + (sumaAccuracy/4));
		System.out.println("Promedio Precision: " + (sumaPrecision/4));
		System.out.println("Promedio Recall: " + (sumaRecall/4));
		System.out.println("Promedio F1-Score: " + (sumaF1/4) + "\n");
	}
	

	public static void compararExperimentos(int exp1, int exp2, String [] listaExperimentos) throws IOException { 
		//compara ambos experimentos a través del indice de cada uno, impriendo los resultados
		String primerExp = listaExperimentos[exp1];
		String segundoExp = listaExperimentos[exp2];
		int [] matrizExp1 = matrizDeConfusion(primerExp);
		int [] matrizExp2 = matrizDeConfusion(segundoExp);
		
		System.out.println("Comparación " + primerExp + " vs " + segundoExp);
		//matriz de confusion
		System.out.println("Matriz de confusion:");
		System.out.println(primerExp + ": " + "TP = " + matrizExp1[0] + " FP = " + matrizExp1[1] + "\n     " + " TN = " + matrizExp1[2] + " FN = " + matrizExp1[3] + "\n");
		System.out.println(segundoExp + ": " + "TP = " + matrizExp2[0] + " FP = " + matrizExp2[1] + "\n     " + " TN = " + matrizExp2[2] + " FN = " + matrizExp2[3] + "\n");
		
		//metricas
		System.out.println("Metricas:");
		System.out.println(primerExp + ": Acc = " + accuracy(matrizExp1) + " | P = " + precision(matrizExp1) + " | R = " + recall(matrizExp1) + " | F1 = " + f1Score(precision(matrizExp1), recall(matrizExp1)));
		System.out.println(segundoExp + ": Acc = " + accuracy(matrizExp2) + " | P = " + precision(matrizExp2) + " | R = " + recall(matrizExp2) + " | F1 = " + f1Score(precision(matrizExp2), recall(matrizExp2)) + "\n");
		
		if (f1Score(precision(matrizExp1), recall(matrizExp1)) > f1Score(precision(matrizExp2), recall(matrizExp2))) { 
			System.out.println("Debido a que el F1-Score del " + primerExp + " es más alto, este experimento es mejor.");
		} else {
			System.out.println("Debido a que el F1-Score del " + segundoExp + " es más alto, este experimento es mejor.");
		} System.out.println("");
		//IMPORTANTE, FALTA COMPLETAR LO DE LA COMPARACIÓN !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	}
	
	public static void listaDeExperimentos(String [] listaExperimentos) {
		int indice = 0;
		for(String exp : listaExperimentos) {
			System.out.println(indice + ") " + exp);
			indice++;
		}
	}
	
	public static void mostrarMatrizDeUnExp(String [] listaExperimentos, int opcion) throws IOException { 
		String exp = listaExperimentos[opcion];
		int [] matriz = matrizDeConfusion(exp);
		System.out.println(exp + ": " + "TP = " + matriz[0] + " FP = " + matriz[1] + "\n     " + " TN = " + matriz[2] + " FN = " + matriz[3] + "\n");
	}
	
	public static void mostrarMetricasDeUnExp(String [] listaExperimentos, int opcion) throws IOException {
		String exp = listaExperimentos[opcion];
		int [] matriz = matrizDeConfusion(exp);
		System.out.println(exp + ": Acc = " + accuracy(matriz) + " | P = " + precision(matriz) + " | R = " + recall(matriz) + " | F1 = " + f1Score(precision(matriz), recall(matriz)) + "\n");
	}
	
	public static void promedioAccuracy(String [] listaExperimentos) throws IOException {
		double sumaAccuracy = 0;
		for (String experimento : listaExperimentos) {
			int [] matriz = matrizDeConfusion(experimento);
			double accuracy = accuracy(matriz);
			sumaAccuracy += accuracy;
		}
		System.out.println("Promedio Accuracy: " + (sumaAccuracy/4));
	}
	
	public static void main(String[] args) throws IOException {
		String [] listaExperimentos = new String[cantExp()];
		agregarExp(listaExperimentos);
		
		//MENU
		int opcion;
		Scanner scan = new Scanner(System.in);
		do {
			System.out.println("Bienvenido!!!");
			System.out.println("-----------MENU PRINCIPAL-----------");
			System.out.println("1) Admin");
			System.out.println("2) Usuario");
			System.out.println("3) Salir");
			System.out.println("Elija una opción: ");
			opcion = Integer.valueOf(scan.nextLine());
			
			if (opcion == 1) {
				menuAdmin();
				int opcionAdmin = Integer.valueOf(scan.nextLine());
				while (opcionAdmin != 6) {
					if (opcionAdmin == 1) {
						verMatrizCompleta();
						
					} else if (opcionAdmin == 2) {
						mejorF1Score(listaExperimentos);
						
					} else if (opcionAdmin == 3) {
						promedioGlobalMetricas(listaExperimentos);
						
					} else if (opcionAdmin == 4) {
						System.out.println("Numero - Experimentos:");
						mostrarExperimentos(listaExperimentos);
						System.out.println("Ingrese número del primer experimento a comparar: ");
						int exp1 = Integer.valueOf(scan.nextLine()) - 1;
						System.out.println("Ingrese número del segundo experimento a comparar: ");
						int exp2 = Integer.valueOf(scan.nextLine()) - 1;
						System.out.println(" ");
						compararExperimentos(exp1, exp2, listaExperimentos);
						
					} else if (opcionAdmin == 5) {
						 /////////////// no se como hacer esta :,v
						 
					}
					menuAdmin();
					opcionAdmin = Integer.valueOf(scan.nextLine());
				}
			}
			
			if (opcion == 2) {
				menuUsuario();
				int opcionUsuario = Integer.valueOf(scan.nextLine());
				while (opcionUsuario != 5) {
					if (opcionUsuario == 1) {
						listaDeExperimentos(listaExperimentos);
						
					} else if (opcionUsuario == 2) {
						mostrarExperimentos(listaExperimentos);
						System.out.println("Ingrese el número del experimento deseado: ");
						int numExp = Integer.valueOf(scan.nextLine()) - 1;
						mostrarMatrizDeUnExp(listaExperimentos, numExp);
						
					} else if (opcionUsuario == 3) {
						mostrarExperimentos(listaExperimentos);
						System.out.println("Ingrese el número del experimento deseado: ");
						int numExp = Integer.valueOf(scan.nextLine()) - 1;
						mostrarMetricasDeUnExp(listaExperimentos, numExp);
						
					} else if (opcionUsuario == 4) {
						promedioAccuracy(listaExperimentos);
					}
					menuUsuario();
					opcionUsuario = Integer.valueOf(scan.nextLine());
				}
			}
		} while (opcion != 3);	
		scan.close();
	}
	
	public static void mostrarExperimentos(String [] listaExperimentos) {
		int indice = 1;
		for (String experimento : listaExperimentos) {
			System.out.println(indice + ") " + experimento );
			indice++;
		}
	}
	
	
	public static void menuAdmin() {
		//Imprime el menu del administrador
		System.out.println("1) Ver matriz completa de métricas");
		System.out.println("2) Identificar experimento con mejor F1-Score");
		System.out.println("3) Calcular promedio global de cada métrica");
		System.out.println("4) Comparar dos experimentos lado a lado");
		System.out.println("5) Comparar CSV con matriz de confusión generada");
		System.out.println("6) Volver");
	}
	
	public static void menuUsuario() {
		//Imprime el menu del usuario
		System.out.println("1) Ver lista de experimentos");
		System.out.println("2) Mostrar matriz de confusión de un experimento (TP,FP,TN,FN)");
		System.out.println("3) Ver métricas de un experimento (Accuracy, Precision, Recall, F1)");
		System.out.println("4) Ver promedio de Accuracy de todos los modelos");
		System.out.println("5) Volver");
	}
		
}	
